(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{215:function(t,a,s){t.exports=s.p+"assets/img/region_ids.3d501802.png"},248:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"battle-maps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#battle-maps","aria-hidden":"true"}},[t._v("#")]),t._v(" Battle Maps")]),t._v(" "),e("h2",{attrs:{id:"starting-cells"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-cells","aria-hidden":"true"}},[t._v("#")]),t._v(" Starting Cells")]),t._v(" "),e("p",[t._v("When a battle starts on a map, enemies and actors are supposed to have\nan initial cell position."),e("br"),t._v("\nThere are two ways to define a starting position.")]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[t._v("The number of spawned enemies and actors depends on the number of available starting cells. If there aren't enough, not all of your troop or party will be instantiated.")])]),t._v(" "),e("h3",{attrs:{id:"with-region-ids"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#with-region-ids","aria-hidden":"true"}},[t._v("#")]),t._v(" With Region IDs")]),t._v(" "),e("p",[t._v("Region IDs is one feature of RPG Maker MV that let you tag map cells."),e("br"),t._v("\nYou can use very distinct region IDs to specify starting cells for both actors and enemies."),e("br"),t._v("\nBy default, actors starting cells are represented by the region "),e("code",[t._v("5")]),t._v(", and enemies cells are represented by the region "),e("code",[t._v("1")]),t._v("."),e("br"),t._v("\nThis can be configured in the plugin parameters. (Link to reference)"),e("br"),t._v("\nThe usage is straighforward. Here's an example:\n"),e("img",{attrs:{src:s(215),alt:""}}),e("br"),t._v("\nHowever, region IDs give you a poor customization over starting cells. If you want a deeper control, use events as described bellow.")]),t._v(" "),e("h3",{attrs:{id:"with-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#with-events","aria-hidden":"true"}},[t._v("#")]),t._v(" With Events")]),t._v(" "),e("p",[t._v("An event with the "),e("code",[t._v("letbs_starting_cell")]),t._v(" tag in its "),e("strong",[t._v("comment")]),t._v(" will be considered as a valid starting cell. The tag gives you more customization power:")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\ntype: actor/enemy\nindex: battler_index\nid: battler_id\nforce_spawn: true/false\nstates: state1, state2, ...\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("override:")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("tag_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n...\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("add:")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("tag_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n...\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("When the battle starts, an entity, either an actor or an enemy based on an ID or its index in its group will be instantiated at the event position."),e("br"),t._v("\nIf "),e("code",[t._v("force_spawn")]),t._v(" is set to "),e("code",[t._v("true")]),t._v(", the entity will be instantiated regardless of if it is available in the party or troop."),e("br"),t._v("\nThe nested tag "),e("code",[t._v("letbs_starting_cell.override")]),t._v(" lets you add a notetag override to the spawned entity."),e("br"),t._v("\nHere's a cool usage for it:")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\ntype: actor\nid: 4\nforce_spawn: true\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("override:")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("letbs_ai")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nteams: enemy\nauto_controlled: true\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("override")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("This configuration override the "),e("code",[t._v("letbs_ai")]),t._v(" tag with two new parameters. It's as if the spawned entity acquires this notetag:")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("letbs_ai")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nteams: enemy\nauto_controlled: true\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("letbs_ai")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("div",{staticClass:"danger custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("Important")]),t._v(" "),e("p",[t._v("This feature is based on the notetags overriding principle (link). So if you manually add a tag override later in battle, the entity will behave differently.")])]),t._v(" "),e("p",[t._v("In practice, this configuration spawns an actor (id 4) that'll be considered as an enemy and which is played by the computer.")]),t._v(" "),e("p",[t._v("This is similarly how the "),e("code",[t._v("letbs_starting_cell.add")]),t._v(" notetag works. It adds a notetag item to the entity's notetags inventory (link). This is also a good way to add an additional script execution:")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\ntype: actor\nid: 4\nforce_spawn: true\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("add:")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("letbs_script(onBattleStart)")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n...\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("letbs_starting_cell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h2",{attrs:{id:"battle-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#battle-events","aria-hidden":"true"}},[t._v("#")]),t._v(" Battle Events")]),t._v(" "),e("h2",{attrs:{id:"starting-battle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-battle","aria-hidden":"true"}},[t._v("#")]),t._v(" Starting Battle")])])},[],!1,null,null,null);a.default=n.exports}}]);